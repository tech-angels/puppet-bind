# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# bind_check_hostname.rb
#
# ---- original file header ----
#
# @summary
#   Prepare checked string for *is_domain_name()* (from stdlib) by removing /^*./
#if present. *is_domain_name()* doesn't want any wildcard, which makes sense in
#most cases.
#
#
Puppet::Functions.create_function(:'bind_check_hostname') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    if (arguments.size != 1) then
      raise(Puppet::ParseError, "bind_check_hostname(): Wrong number of arguments "+
        "given #{arguments.size} for 1")
    end

    record = arguments[0]

    # Allows '@'
    return true if record == '@'

    # Allow wildcard only at the begining
    # As we're calling stdlib's *is_domain_name()*
    # which doesn't accept wildcards, we just clean it
    # from the record, and pass this new string to
    # *is_domain_name()*
    domain = record.sub(/^\*\./, '')
    return function_is_domain_name([domain])
  
  end
end
